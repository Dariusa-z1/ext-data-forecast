"""
Title: Generate Monthly Holiday Features for Italy

Description:
    Reads classified holiday data from 'italy_holidays.csv' and aggregates it into monthly features.
    Calculates counts and binary indicators for total, civil, and religious holidays per month.
    Useful for time series models or seasonal pattern analysis.

Input:
    - italy_holidays.csv: Must be generated by generate_italian_holidays.py

Output:
    - italy_monthly_holiday_features.csv: A CSV with columns:
        [Month, num_holidays, Civil, Religious, has_holiday, has_civil_holiday, has_religious_holiday]
"""


import pandas as pd

# Load the categorized holiday data
holiday_df = pd.read_csv("italy_holidays.csv")

# Ensure the 'Date' column is in datetime format
holiday_df["Date"] = pd.to_datetime(holiday_df["Date"])

# Create a Year-Month column for aggregation
holiday_df["YearMonth"] = holiday_df["Date"].dt.to_period("M")

# Aggregate holiday counts by month and type
monthly_counts = holiday_df.groupby(["YearMonth", "Type"]).size().unstack(fill_value=0).reset_index()

# Add total holiday count and binary indicators
monthly_counts["num_holidays"] = monthly_counts.get("Civil", 0) + monthly_counts.get("Religious", 0)
monthly_counts["has_holiday"] = (monthly_counts["num_holidays"] > 0).astype(int)
monthly_counts["has_civil_holiday"] = (monthly_counts.get("Civil", 0) > 0).astype(int)
monthly_counts["has_religious_holiday"] = (monthly_counts.get("Religious", 0) > 0).astype(int)

# Convert YearMonth back to a standard datetime column
monthly_counts["Month"] = monthly_counts["YearMonth"].dt.to_timestamp()

# Rearrange columns for clarity
final_features = monthly_counts[[
    "Month", "num_holidays", "Civil", "Religious",
    "has_holiday", "has_civil_holiday", "has_religious_holiday"
]]

# Save the result to CSV
final_features.to_csv("italy_monthly_holiday_features.csv", index=False)

print("Feature file saved as 'italy_monthly_holiday_features.csv'")
